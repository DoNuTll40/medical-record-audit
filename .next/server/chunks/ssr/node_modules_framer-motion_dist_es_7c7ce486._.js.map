{"version":3,"sources":["turbopack:///[project]/node_modules/framer-motion/dist/es/render/dom/features-animation.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-motion-value.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.mjs"],"sourcesContent":["\"use client\";\nimport { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n","\"use client\";\nimport { motionValue } from 'motion-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nclass DragControls {\n    constructor() {\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */\n    subscribe(controls) {\n        this.componentControls.add(controls);\n        return () => this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n    start(event, options) {\n        this.componentControls.forEach((controls) => {\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n    /**\n     * Cancels a drag gesture.\n     *\n     * ```jsx\n     * dragControls.cancel()\n     * ```\n     *\n     * @public\n     */\n    cancel() {\n        this.componentControls.forEach((controls) => {\n            controls.cancel();\n        });\n    }\n    /**\n     * Stops a drag gesture.\n     *\n     * ```jsx\n     * dragControls.stop()\n     * ```\n     *\n     * @public\n     */\n    stop() {\n        this.componentControls.forEach((controls) => {\n            controls.stop();\n        });\n    }\n}\nconst createDragControls = () => new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n    return useConstant(createDragControls);\n}\n\nexport { DragControls, useDragControls };\n"],"names":[],"mappings":"mEACA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAMA,IAAM,EAAe,CACjB,SANJ,AAMc,EANd,CAAA,CAAA,OAMc,sBAAsB,CAChC,GAAG,EAAA,UAAU,CACb,GAAG,EAAA,iBAAiB,AACxB,wDCXA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAmBA,SAAS,EAAe,CAAO,EAC3B,IAAM,EAAQ,CAAA,EAAA,EAAA,WAAA,AAAW,EAAC,IAAM,CAAA,EAAA,EAAA,WAAA,AAAW,EAAC,IAMtC,UAAE,CAAQ,CAAE,CAAG,CAAA,EAAA,EAAA,UAAA,AAAU,EAAC,EAAA,mBAAmB,EACnD,GAAI,EAAU,CACV,GAAM,EAAG,EAAU,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAS,GAC/B,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,IAAM,EAAM,EAAE,CAAC,SAAU,GAAY,EAAE,CACrD,CACA,OAAO,CACX,8ECpCA,IAAA,EAAA,EAAA,CAAA,CAAA,MAsBA,OAAM,EACF,aAAc,CACV,IAAI,CAAC,iBAAiB,CAAG,IAAI,GACjC,CAMA,UAAU,CAAQ,CAAE,CAEhB,OADA,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GACpB,IAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAC/C,CAgBA,MAAM,CAAK,CAAE,CAAO,CAAE,CAClB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,AAAC,IAC5B,EAAS,KAAK,CAAC,EAAM,WAAW,EAAI,EAAO,EAC/C,EACJ,CAUA,QAAS,CACL,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,AAAC,IAC5B,EAAS,MAAM,EACnB,EACJ,CAUA,MAAO,CACH,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,AAAC,IAC5B,EAAS,IAAI,EACjB,EACJ,CACJ,CACA,IAAM,EAAqB,IAAM,IAAI,EA2BrC,SAAS,IACL,MAAO,CAAA,EAAA,EAAA,WAAA,AAAW,EAAC,EACvB","ignoreList":[0,1,2]}